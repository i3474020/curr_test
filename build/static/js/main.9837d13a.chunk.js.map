{"version":3,"sources":["App/TableLine.js","App/Table.js","App/Chart.js","App.js","serviceWorker.js","index.js"],"names":["TableLine","item","meta","timestamp","toString","CURRENCIES","map","curr","key","toTimeString","Value","Table","data","className","Chart","width","height","currency","forEach","i","name","toLocaleTimeString","parseData","margin","top","right","left","bottom","strokeDasharray","dataKey","idx","type","stroke","COLORS","sourceUrl","App","React","useState","setData","loading","setLoading","useEffect","getData","a","axios","get","result","values","Valute","prevState","concat","Date","timeout","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAceA,EAXG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAChB,OACI,4BACI,4BAAKA,EAAKC,KAAKC,UAAUC,YACxBC,EAAWC,KACR,SAACC,GAAD,OAAU,wBAAIC,IAAKD,EAAON,EAAKC,KAAKC,UAAUM,gBAAiBR,EAAKM,GAAMG,YCkB3EC,EAtBD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACZ,OACI,2BAAOC,UAAW,cACd,+BACA,4BACI,0CACCR,EAAWC,KACR,SAAAC,GAAI,OAAI,wBAAIC,IAAKD,GAAOA,QAKhC,+BACCK,EAAKN,KACF,SAAAL,GAAI,OAAI,kBAAC,EAAD,CAAWO,IAAKP,EAAKC,KAAKC,UAAWF,KAAMA,U,QC2BpDa,EAtCD,SAAC,GAAY,IAAXF,EAAU,EAAVA,KAcZ,OACI,6BACI,kBAAC,IAAD,CACIG,MAAO,IACPC,OAAQ,IACRJ,KAlBZ,SAAmBA,GACf,OAAOA,EAAKN,KAAI,SAAAL,GACZ,IAAMgB,EAAW,GAIjB,OAHAZ,EAAWa,SACP,SAACC,GAAD,OAAOF,EAASE,GAAKlB,EAAKkB,GAAGT,SAE1B,2BACAO,GADP,IAEIG,KAAMnB,EAAKC,KAAKC,UAAUkB,0BAUpBC,CAAUV,GAChBW,OAAQ,CACJC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAGzC,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MAECxB,EAAWC,KACR,SAACL,EAAM6B,GAAP,OAAe,kBAAC,IAAD,CAAMtB,IAAKP,EAAM8B,KAAK,WAAWF,QAAS5B,EAAM+B,OAAQC,EAAOH,WChCrFzB,EAAa,CAAC,MAAO,OACrB4B,EAAS,CAAC,MAAM,SAIvBC,EAAY,6CAoDHC,MAlDf,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACJzB,EADI,KACE0B,EADF,OAEmBF,IAAMC,UAAS,GAFlC,mBAEJE,EAFI,KAEKC,EAFL,KAmCX,OA/BAJ,IAAMK,WAAU,WAAM,SAGHC,IAHG,2EAGlB,kCAAAC,EAAA,sEACyBC,IAAMC,IAAIX,GADnC,OACUY,EADV,QAEUC,EAFV,OAEmBD,QAFnB,IAEmBA,GAFnB,UAEmBA,EAAQlC,YAF3B,aAEmB,EAAcoC,UAEnB/B,EAAW,GACjBZ,EAAWa,SACP,SAACC,GAAD,OAAOF,EAASE,GAAK4B,EAAO5B,MAEhCmB,GAAQ,SAAAW,GACA,OAAOA,EAAUC,OAAO,CAAC,2BAClBjC,GADiB,IACPf,KAAM,CACfC,UAAW,IAAIgD,cAOnCX,GAAW,GAlBf,4CAHkB,sBAClBA,GAAW,GAuBXE,IACA,IAAMU,EAAUC,aAAY,kBAAMX,MAjCzB,KAkCT,OAAO,WACH,OAAOY,cAAcF,MAE1B,IAGC,yBAAKvC,UAAU,OACV0B,GAAW,kDACZ,yBAAK1B,UAAW,SACZ,6BACI,kBAAC,EAAD,CAAOD,KAAMA,KAEjB,6BACI,kBAAC,EAAD,CAAOA,KAAMA,QC5Cb2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9837d13a.chunk.js","sourcesContent":["import React from 'react';\nimport {CURRENCIES} from \"../App\";\n\nconst TableLine = ({item}) => {\n    return (\n        <tr>\n            <td>{item.meta.timestamp.toString()}</td>\n            {CURRENCIES.map(\n                (curr) => <td key={curr + item.meta.timestamp.toTimeString()}>{item[curr].Value}</td>\n            )}\n        </tr>\n    );\n};\n\nexport default TableLine;","import React from 'react';\nimport TableLine from \"./TableLine\";\nimport {CURRENCIES} from \"../App\";\n\nconst Table = ({data}) => {\n    return (\n        <table className={'curr_table'}>\n            <thead>\n            <tr>\n                <th>updateTime</th>\n                {CURRENCIES.map(\n                    curr => <th key={curr}>{curr}</th>\n                )}\n            </tr>\n\n            </thead>\n            <tbody>\n            {data.map(\n                item => <TableLine key={item.meta.timestamp} item={item}/>\n            )}\n            </tbody>\n\n        </table>\n    );\n};\n\nexport default Table;","import React from 'react';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nimport {COLORS, CURRENCIES} from \"../App\";\n\nconst Chart = ({data}) => {\n    function parseData(data) {\n        return data.map(item => {\n            const currency = {};\n            CURRENCIES.forEach(\n                (i) => currency[i] = item[i].Value\n            )\n            return {\n                ...currency,\n                name: item.meta.timestamp.toLocaleTimeString()\n            }\n        })\n    }\n\n    return (\n        <div>\n            <LineChart\n                width={500}\n                height={300}\n                data={parseData(data)}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"name\"/>\n                <YAxis/>\n                <Tooltip/>\n                <Legend/>\n\n                {CURRENCIES.map(\n                    (item, idx) => <Line key={item} type=\"monotone\" dataKey={item} stroke={COLORS[idx]}/>\n                )}\n            </LineChart>\n        </div>\n    );\n};\n\nexport default Chart;","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Table from \"./App/Table\";\nimport Chart from \"./App/Chart\";\n\nexport const CURRENCIES = ['USD', 'EUR'];\nexport const COLORS = ['red','green'];\n\nconst interval = 10000;\n\nconst sourceUrl = 'https://www.cbr-xml-daily.ru/daily_json.js';\n\nfunction App() {\n    const [data, setData] = React.useState([])\n    const [loading, setLoading] = React.useState(true)\n\n    React.useEffect(() => {\n        setLoading(true);\n\n        async function getData() {\n            const result = await axios.get(sourceUrl);\n            const values = result?.data?.Valute\n            if (values) {\n                const currency = {};\n                CURRENCIES.forEach(\n                    (i) => currency[i] = values[i]\n                )\n                setData(prevState => {\n                        return prevState.concat([{\n                            ...currency, meta: {\n                                timestamp: new Date()\n                            }\n                        }]);\n\n                    }\n                )\n            }\n            setLoading(false);\n        }\n\n        getData();\n        const timeout = setInterval(() => getData(), interval)\n        return () => {\n            return clearInterval(timeout);\n        }\n    }, [])\n\n    return (\n        <div className=\"App\">\n            {loading && <>Loading...</>}\n            <div className={'board'}>\n                <div>\n                    <Table data={data}/>\n                </div>\n                <div>\n                    <Chart data={data}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}